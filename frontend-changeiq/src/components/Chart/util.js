/**
 * Utility functions to process survey questions for visualization in a waterfall chart
 */

/**
 * Categorizes survey questions by financial impact type for waterfall chart consumption
 * @param {Array} surveyQuestions - The array of survey question sections and their questions
 * @returns {Object} Categorized questions organized by financial impact
 */
export const categorizeQuestionsForWaterfall = (surveyQuestions) => {
    // Define the categories for the waterfall chart
    const categories = {
      initialInvestment: {
        title: 'Initial Investment',
        description: 'One-time costs required to implement the technology',
        questions: []
      },
      ongoingCosts: {
        title: 'Ongoing Costs',
        description: 'Recurring expenses required to maintain the technology',
        questions: []
      },
      costSavings: {
        title: 'Cost Savings',
        description: 'Reduction in expenses resulting from the technology',
        questions: []
      },
      revenueIncrease: {
        title: 'Revenue Increase',
        description: 'Additional revenue generated by the technology',
        questions: []
      },
      productivityGains: {
        title: 'Productivity Gains',
        description: 'Efficiency improvements that translate to monetary value',
        questions: []
      },
      risks: {
        title: 'Risk Factors',
        description: 'Potential negative financial impacts',
        questions: []
      }
    };
  
    // Map specific question IDs to their corresponding waterfall categories
    const questionCategoryMap = {
      // Initial Investment
      'upfront_cost': 'initialInvestment',
      'setup_cost': 'initialInvestment',
      'training_cost': 'initialInvestment',
      'additional_staff_cost': 'initialInvestment',
      'hardware_cost': 'initialInvestment',
      
      // Ongoing Costs
      'annual_maintenance': 'ongoingCosts',
      'subscription_fee': 'ongoingCosts',
      
      // Cost Savings
      'labor_hours_saved': 'costSavings',
      'saved_hours_value': 'costSavings',
      'error_cost': 'costSavings',
      'resource_reduction_amount': 'costSavings',
      
      // Revenue Increase
      'revenue_impact': 'revenueIncrease',
      
      // Productivity Gains
      'efficiency_improvement': 'productivityGains',
      'output_increase': 'productivityGains',
      
      // Risks
      'delay_cost_impact': 'risks',
      'productivity_loss_cost': 'risks',
      'contingency_budget': 'risks'
    };
  
    // Process all questions and assign them to appropriate categories
    surveyQuestions.forEach(section => {
      section.questions.forEach(question => {
        const categoryKey = questionCategoryMap[question.id];
        if (categoryKey) {
          // Add section information to each question for context
          const enrichedQuestion = {
            ...question,
            section: section.section
          };
          categories[categoryKey].questions.push(enrichedQuestion);
        }
      });
    });
  
    return categories;
  };
  
  /**
   * Processes survey responses to generate waterfall chart data
   * @param {Object} responses - The survey responses keyed by question ID
   * @param {Object} categorizedQuestions - Questions categorized by financial impact
   * @returns {Array} Data formatted for waterfall chart consumption
   */
  export const generateWaterfallData = (responses, categorizedQuestions) => {
    const waterfallData = [];
    // Starting point - total budget
    if (responses.total_budget) {
      waterfallData.push({
        name: 'Total Budget',
        value: parseFloat(responses.total_budget),
        isStarting: true
      });
    }
  
    // Process each category
    Object.keys(categorizedQuestions).forEach(categoryKey => {
      const category = categorizedQuestions[categoryKey];
      let categoryTotal = 0;
      let hasValues = false;
      
      // Calculate the total value for this category
      category.questions.forEach(question => {
        const response = responses[question.id];
        if (response) {
          // Handle numeric values
          if (!isNaN(parseFloat(response))) {
            hasValues = true;
            const value = parseFloat(response);
            
            // For risks and costs, values are negative in the waterfall
            if (categoryKey === 'risks' || categoryKey === 'initialInvestment' || categoryKey === 'ongoingCosts') {
              categoryTotal -= value;
            } else {
              categoryTotal += value;
            }
          } 
          // Handle percentage selections that need to be applied to other values
          else if (question.id === 'revenue_impact' && response) {
            hasValues = true;
            // Map selection to percentage value
            const percentageMap = {
              'Significant increase (>20%)': 0.25,
              'Moderate increase (10-20%)': 0.15,
              'Slight increase (1-10%)': 0.05,
              'No change': 0,
              'Decrease': -0.05
            };
            
            const percentage = percentageMap[response] || 0;
            // Apply percentage to total budget as an estimate if available
            if (responses.total_budget) {
              categoryTotal += parseFloat(responses.total_budget) * percentage;
            }
          }
          // Similar handling for other percentage-based selections
          else if (question.id === 'efficiency_improvement' && response) {
            hasValues = true;
            const percentageMap = {
              'Less than 10%': 0.05,
              '10-25%': 0.175,
              '26-50%': 0.38,
              '51-75%': 0.63,
              'More than 75%': 0.85
            };
            
            const percentage = percentageMap[response] || 0;
            // Apply efficiency improvements to labor costs if available
            if (responses.staff_hours && responses.hourly_cost) {
              const laborCost = parseFloat(responses.staff_hours) * parseFloat(responses.hourly_cost);
              categoryTotal += laborCost * percentage;
            }
          }
        }
      });
      
      // Only add the category to the waterfall if it has values
      if (hasValues) {
        waterfallData.push({
          name: category.title,
          value: categoryTotal,
          description: category.description,
          isPositive: categoryTotal >= 0
        });
      }
    });
    
    // Add the final result - Net ROI
    const netValue = waterfallData.reduce((sum, item) => sum + item.value, 0);
    waterfallData.push({
      name: 'Net ROI',
      value: netValue,
      isTotal: true
    });
    
    return waterfallData;
  };
  
  /**
   * Calculate ROI percentage based on waterfall data
   * @param {Array} waterfallData - The processed waterfall chart data
   * @returns {Number} ROI percentage
   */
  export const calculateRoiPercentage = (waterfallData) => {
    // Find initial investment (negative values excluding risks)
    const investmentItems = waterfallData.filter(item => 
      !item.isStarting && !item.isTotal && 
      item.value < 0 && 
      (item.name === 'Initial Investment' || item.name === 'Ongoing Costs')
    );
    
    const totalInvestment = Math.abs(investmentItems.reduce((sum, item) => sum + item.value, 0));
    
    // Find gains (positive values)
    const gainItems = waterfallData.filter(item => 
      !item.isStarting && !item.isTotal && item.value > 0
    );
    
    const totalGains = gainItems.reduce((sum, item) => sum + item.value, 0);
    
    // Calculate ROI percentage
    if (totalInvestment > 0) {
      return ((totalGains - totalInvestment) / totalInvestment) * 100;
    }
    
    return 0;
  };
  
  /**
   * Example usage:
   * 
   * import { surveyQuestions } from './surveyQuestions';
   * 
   * // Get categorized questions
   * const categorizedQuestions = categorizeQuestionsForWaterfall(surveyQuestions);
   * 
   * // Process survey responses (from your form/data collection)
   * const surveyResponses = {
   *   total_budget: '100000',
   *   upfront_cost: '50000',
   *   // ... other responses
   * };
   * 
   * // Generate waterfall chart data
   * const waterfallData = generateWaterfallData(surveyResponses, categorizedQuestions);
   * 
   * // Calculate ROI percentage
   * const roiPercentage = calculateRoiPercentage(waterfallData);
   */

// Format currency for tooltip and axis
export const formatCurrency = (value) => {
  // Handle null, undefined, or non-numeric values
  if (value === null || value === undefined || isNaN(Number(value))) {
    return '$0';
  }
  
  // Convert to number if it's a string or other convertible type
  const numValue = Number(value);
  
  // Format based on value size
  if (Math.abs(numValue) >= 1e6) {
    return `$${(numValue / 1e6).toFixed(1)}M`;
  } else if (Math.abs(numValue) >= 1e3) {
    return `$${(numValue / 1e3).toFixed(0)}K`;
  } else {
    return `$${numValue.toFixed(0)}`;
  }
};